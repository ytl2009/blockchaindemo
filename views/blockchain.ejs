<%- include('header') %>
<div class="container-fluid">
    <div class="row">
        <h1>Block Chain</h1>
    </div>
    <% peers.forEach(function (peer, index) { %>

    <h3>Peer<%= peer.title %></h3>
    <div class="d-flex flex-nowrap">
        <% blocks[index].forEach(function (block) { %>
        <div class="col-sm-6">
            <%- include('./components/block',{block:block}) %>
        </div>
        <% }) %>
    </div>

    <% }) %>

</div>

<script type="text/javascript">
    var EC = elliptic.elliptic().ec;
    var ec = new EC('secp256k1');

    $(function () {
        setup(1, 1, 0);
        setup(2, 1, 4);
        setup(3, 1, 3);
        setup(4, 1, 3);
        setup(5, 1, 4);

        setup(1, 2, 0);
        setup(2, 2, 4);
        setup(3, 2, 3);
        setup(4, 2, 3);
        setup(5, 2, 4);

        setup(1, 3, 0);
        setup(2, 3, 4);
        setup(3, 3, 3);
        setup(4, 3, 3);
        setup(5, 3, 4);
    });

    function getText(block, chain) {
        var s = $('#block' + block + 'chain' + chain + 'number').val() +
            $('#block' + block + 'chain' + chain + 'nonce').val() +
            $('#block' + block + 'chain' + chain + 'coinbasevalue').val() +
            $('#block' + block + 'chain' + chain + 'coinbaseto').val();

        for (var x = 0; $('#block' + block + 'chain' + chain + 'tx' + x + 'value').length > 0; x++) {
            s = s + $('#block' + block + 'chain' + chain + 'tx' + x + 'value').val() +
                $('#block' + block + 'chain' + chain + 'tx' + x + 'from').val() +
                $('#block' + block + 'chain' + chain + 'tx' + x + 'to').val() +
                $('#block' + block + 'chain' + chain + 'tx' + x + 'sig').val();
        }
        s = s + $('#block' + block + 'chain' + chain + 'previous').val();
        return s;
    }

    function setup(block, chain, txCount) {
        debugger
        for (var x = 0; x < txCount; x++) {
            verifySignature(block, chain, x);
        }
        updateHash(block, chain);
        $('#block' + block + 'chain' + chain + 'mineButton').click(function (e) {
            e.preventDefault();
            var l = Ladda.create(this);
            l.start();
            setTimeout(function () {
                mine(block, chain, true);
                l.stop();
            }, 250); // give UI time to update
        });
    }

    function verifySignature(block, chain, tx) {
        try {
            var message = $('#block' + block + 'chain' + chain + 'tx' + tx + 'value').val() +
                $('#block' + block + 'chain' + chain + 'tx' + tx + 'from').val() +
                $('#block' + block + 'chain' + chain + 'tx' + tx + 'from').val();
            var binaryMessage = buffer.Buffer.from(message);
            var pubKey = ec.keyFromPublic($('#block' + block + 'chain' + chain + 'tx' + tx + 'from').val(), 'hex');
            if (pubKey.verify(binaryMessage, $('#block' + block + 'chain' + chain + 'tx' + tx + 'sig').val()))
                $('#block' + block + 'chain' + chain + 'tx' + tx + 'sig').removeClass('text-danger');
            else
                $('#block' + block + 'chain' + chain + 'tx' + tx + 'sig').addClass('text-danger');
        }
        catch (e) {
            console.log(e);
        }
    }

</script>

<%- include('footer') %>